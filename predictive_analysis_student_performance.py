# -*- coding: utf-8 -*-
"""Jason Filbert Leo_Predictive Analysis_Student Performance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G1YXDPj1ww3XbuM2T0Te9lFSupB4GJ1G

# Data Loading

Import library yang akan digunakan
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

"""Menginstal kaggle untuk mendownload dataset"""

!pip install kaggle

"""Mendownload data, dari https://www.kaggle.com/datasets/nikhil7280/student-performance-multiple-linear-regression"""

!kaggle datasets download -d nikhil7280/student-performance-multiple-linear-regression

"""unzip data"""

import zipfile
zip = '/content/student-performance-multiple-linear-regression.zip'
zip_ref = zipfile.ZipFile(zip, 'r')
zip_ref.extractall()
zip_ref.close()

"""Membaca file csv yang telah diunzip"""

# loading dataset
dir = './Student_Performance.csv'
dataframe = pd.read_csv(dir)
dataframe.head()

"""# Exploratory Data Analysis

Overview jenis data pada setiap kolom dataframe
"""

dataframe.info()

"""Overview nilai-nilai statistik pada setiap kolom dataframe"""

dataframe.describe()

"""Klasifikasi setiap kolom dataframe sebagai fitur kategorikal atau numerik"""

num_features = []
categorical_features = []
for data in dataframe:
    if dataframe[data].dtype == 'object':
        categorical_features.append(data)
    else:
        num_features.append(data)

"""Hubungan fitur kategori dengan Performance Index.

Diperoleh bahwa fitur jenis ini memiliki pengaruh rendah terhadap Performance Index.
"""

for col in categorical_features:
  sns.catplot(x=col, y="Performance Index", kind="bar", dodge=False, height = 4, aspect = 3,  data=dataframe, palette="Set3")
  plt.title("Rata-rata 'Performance Index' Relatif terhadap - {}".format(col))

"""Hubungan antar fitur numerik

Diperoleh fitur Previous Score memiliki pengaruh besar terhadap Performance Index.
"""

sns.pairplot(dataframe[num_features], diag_kind = 'kde')
plt.show()

plt.figure(figsize=(10, 8))
correlation_matrix = dataframe[num_features].corr().round(2)

"""Matriks korelasi antar fitur numerik"""

sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)
plt.show()

"""# Data Preparation

Encoding fitur kategori Extracurricular Activities
"""

from sklearn.preprocessing import  OneHotEncoder
dataframe = pd.concat([dataframe, pd.get_dummies(dataframe['Extracurricular Activities'], prefix='Extracurricular Activities')],axis=1)
dataframe.drop(['Extracurricular Activities'], axis=1, inplace=True)
dataframe.head()

"""Pembagian data menjadi training set dan test set"""

from sklearn.model_selection import train_test_split

X = dataframe.drop(["Performance Index"],axis =1)
y = dataframe["Performance Index"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)

"""Jumlah sampel pada dataset setelah pembagian"""

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""Standardisasi fitur numerik"""

from sklearn.preprocessing import StandardScaler
num_features = num_features[:-1]
scaler = StandardScaler()
scaler.fit(X_train[num_features])
X_train[num_features] = scaler.transform(X_train.loc[:, num_features])
X_train[num_features].head()

"""Mengecek mean dan std data setelah standardisasi"""

X_train[num_features].describe().round(4)

"""# Model Development

Persiapan dataframe
"""

models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN', 'RandomForest', 'Boosting'])

"""Model K-Nearest"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)
models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""Model Random Forest"""

from sklearn.ensemble import RandomForestRegressor

RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""Model Boosting Algorithm"""

from sklearn.ensemble import AdaBoostRegressor

boosting = AdaBoostRegressor(learning_rate=0.1, random_state=55)
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""# Evaluasi model

Scaling fitur numerik
"""

X_test.loc[:, num_features] = scaler.transform(X_test[num_features])

"""Evaluasi MSE model"""

mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}

for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e4
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e4
mse

"""Plot MSE setiap model pada train dan test set"""

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""Diperoleh bahwa model RF memberikan error terkecil sehingga dipilih sebagai model untuk melakukan prediksi performa siswa."""

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)

"""Diperoleh bahwa model Random Forest memberikan hasil prediksi paling mendekati dengan nilai asli."""
